<!DOCTYPE html>
<html lang="es" ng-app="yexir" ng-strict-di ng-controller="yexirLayoutCtrl">
  <head>
    <meta charset="utf-8">
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="apple-mobile-web-app-capable" content="yes"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    
    <% if ( typeof home  == 'undefined') { %>

      <meta name="robots" content="noindex">

    <% } %>

    <title>Yexir • Pide lo que quieras por WhatsApp, 24/7.</title>
    <meta content="Yexir – Pide lo que quieras por WhatsApp" property="og:title">
    <meta content="{{urlbase}}/images/metapic.png" property="og:image">
    <meta content="{{urlbase}}/images/metapic.png" property="og:image:secure_url">
    <meta content="{{urlbase}}/" property="og:url">
    <meta content="website" property="og:type">
    <meta content="Yexir" property="og:site_name">
    <meta name="description" content="Yexir puede comprar, vender, buscar o reservar cualquier cosa por ti a través de WhatsApp" property="og:description">
    <meta content="summary" name="twitter:card">
    <meta content="@YexirNow" name="twitter:site">
    <meta content="@YexirNow" name="twitter:creator">
    <meta content="Yexir – Pide lo que quieras por WhatsApp" name="twitter:title">
    <meta content="Yexir puede comprar, vender, buscar o reservar cualquier cosa por ti a través de WhatsApp" name="twitter:description">
    <meta content="{{urlbase}}/assets/images/metapic.png" name="twitter:image">
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <link href="http://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.1/css/materialize.min.css"> -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
          
    <script type="text/javascript">
      
    </script>
  </head>

  <body>
    
    <%- partial('topbar') %>
    
    <div class="container">
      
      <%- body %>

      
    </div>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/0-jquery.min.js"></script>
    <script src="/js/dependencies/01-angular.min.js"></script>
    <script src="/js/dependencies/02-angular-route.js"></script>
    <script src="/js/dependencies/03-angular-cookies.js"></script>
    <script src="/js/dependencies/angularanimate.js"></script>
    <script src="/js/dependencies/bootstrap.min.js"></script>
    <script src="/js/app-1.0.js"></script>
    <script src="/js/plugins/ScrollToPlugin.min.js"></script>
    <script src="/js/plugins/TweenMax.min.js"></script>
    <script src="/js/plugins/flexslider.min.js"></script>
    <script src="/js/plugins/materialize.js"></script>
    <script src="/js/plugins/parallax.js"></script>
    <script src="/js/plugins/placeholders.min.js"></script>
    <script src="/js/plugins/scripts.js"></script>
    <script src="/js/plugins/smooth-scroll.min.js"></script>
    <script src="/js/plugins/spectragram.min.js"></script>
    <script src="/js/plugins/twitterfetcher.min.js"></script>
    <!--SCRIPTS END-->

  <!-- <script src="https://cdn.supportkit.io/supportkit.min.js"></script>
  <script>
    SupportKit.init({appToken: '7lrm227fg7wpb45v68ku7n3em'});
  </script> -->
  <script type="text/javascript">
    // $(document).ready(function() {
    //   $('.modal-trigger').leanModal();
    // });
  </script>
</html>
